version: 2

jobs:

  # Building and testing the project
  # Useful when a PR is open, for example
  test:
    # Our environment, Python 3.7
    docker:
      - image: circleci/python:3.7

    # The steps for our build-and-test
    steps:
      # Get the code
      - checkout

      # Cache can be tricky at first, but this means
      # Please, restore my cache (what is actually on the cache will be defined later)
      # if the text key `deps-{{ checksum "poetry.lock" }}` changes (and it WILL change everytime poetry.lock is updated since we rely on its checksum)
      # and poetry.lock is updated every time we add a new dependency to our project
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}

      # Let's install the dependencies
      - run:
          name: Install Dependencies
          command: |
            pip install --upgrade poetry
            python -m poetry install

      # Save's the specified path as a cache. This is the path Poetry uses to install the dependencies
      # So if you don't install anything new, this folder won't change and the cache will be effective
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      # Last step, runs our tests ommiting the dependencies path (so we don't take their coverage into account)
      # And send our coverage somewhere, in this case, coveralls
      - run:
          name: Run Pytest, report coverage
          command: |
            python -m poetry run coverage run --omit="/home/circleci/.cache/pypoetry/virtualenvs" -m pytest
            python -m poetry run coverage report

  # create the GitHub release
  release:

    # Same environment
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout


  # This is the definition of another job, the one we use to publish the package to PyPI
  publish:

    # Same environment
    docker:
      - image: circleci/python:3.7

    steps:

      # Gets the code
      - checkout

      # Use `poetry publish` to Publish the package using username and password from CircleCI environment variables
      # Which can be configured inside CircleCI's interface
      - run:
          name: Push to PyPI
          command: |
            poetry publish --build --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction

# In the workflows section, we specify when we want to run the jobs defined
workflows:
  version: 2

  # The build-and-test we will run EVERYTIME a piece of code changes
  build-and-test-workflow:
    jobs:
      - test

    # The deployment workflow publishes the package
  release-and-publish:
    jobs:
      - release:
          filters:
            branches:
              only: main

      # Runs build and test, but now just on Git tags (created from a GitHub release)
      - test

      # Runs the deployment job, just with the tags as well
      - publish:
          requires:
            - release
            - test
          filters:
            branches:
              only: main